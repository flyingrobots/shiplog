name: Bash Matrix CI

on:
  push:
    branches: [main, trunk, master]
  pull_request:

permissions:
  contents: read

jobs:
  bash-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: debian
            base_image: debian:bookworm-slim
            distro_family: debian
            name: "Debian (bookworm)"
          - id: ubuntu
            base_image: ubuntu:24.04
            distro_family: debian
            name: "Ubuntu 24.04"
          - id: fedora
            base_image: fedora:40
            distro_family: fedora
            name: "Fedora 40"
          - id: alpine
            base_image: alpine:3.20
            distro_family: alpine
            name: "Alpine 3.20"
          - id: arch
            base_image: archlinux:base
            distro_family: arch
            name: "Arch Linux"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-matrix-${{ matrix.id }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-matrix-${{ matrix.id }}-
            ${{ runner.os }}-matrix-

      - name: Build test image (${{ matrix.name }})
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ci-matrix/Dockerfile
          push: false
          load: true
          tags: shiplog-ci:${{ matrix.id }}
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            DISTRO_FAMILY=${{ matrix.distro_family }}
            MATRIX_NAME=${{ matrix.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move buildx cache (persist across steps)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Run tests in container (${{ matrix.name }})
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ci-logs
          logfile="ci-logs/${{ matrix.id }}.log"
          echo "Running: ${{ matrix.name }}" | tee "$logfile"
          # Mount repo read-only at /work; container entrypoint runs /usr/local/bin/run-tests
          docker run --rm -v "$PWD":/work:ro shiplog-ci:${{ matrix.id }} 2>&1 | tee -a "$logfile"

      - name: Upload per-distro logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bash-matrix-logs-${{ matrix.id }}
          path: |
            ci-logs/${{ matrix.id }}.log
            test/**/*.log
          if-no-files-found: warn
